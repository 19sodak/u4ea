{"ast":null,"code":"export var BinauralBeat = function () {\n  BinauralBeat.SINE = 'sine';\n  BinauralBeat.SQUARE = 'square';\n  BinauralBeat.SAWTOOTH = 'sawtooth';\n  BinauralBeat.TRIANGLE = 'triangle';\n\n  function BinauralBeat(ctx, pitch, beats) {\n    this.input = ctx.createGain();\n    this.output = ctx.createGain();\n    this.pitch = pitch;\n    this.beatRate = beats;\n    this.waveType = 'sine';\n    this.compressNodes = false;\n    this.started = false;\n\n    this._createInternalNodes(ctx);\n\n    this._routeNodes();\n\n    this.setPitch(this.pitch);\n    this.setWaveType(this.waveType);\n  }\n\n  BinauralBeat.prototype._createInternalNodes = function (ctx) {\n    this.leftChannel = ctx.createOscillator();\n    this.rightChannel = ctx.createOscillator();\n    this.channelMerger = ctx.createChannelMerger();\n    return this.compressor = ctx.createDynamicsCompressor();\n  };\n\n  BinauralBeat.prototype._routeNodes = function () {\n    if (this.compressNodes) {\n      this.input.connect(this.compressor);\n      this.channelMerger.connect(this.compressor);\n      return this.compressor.connect(this.output);\n    } else {\n      this.input.connect(this.output);\n      return this.channelMerger.connect(this.output);\n    }\n  };\n\n  BinauralBeat.prototype._startOscillators = function () {\n    this.leftChannel.start(0);\n    return this.rightChannel.start(0);\n  };\n\n  BinauralBeat.prototype._connectOscillators = function () {\n    this.leftChannel.connect(this.channelMerger, 0, 0);\n    return this.rightChannel.connect(this.channelMerger, 0, 1);\n  };\n\n  BinauralBeat.prototype._disconnectOscillators = function () {\n    this.leftChannel.disconnect();\n    return this.rightChannel.disconnect();\n  };\n\n  BinauralBeat.prototype._getChannelFrequency = function (channelNum) {\n    var channelFrequency, frequencyOffset;\n    frequencyOffset = this.beatRate / 2;\n\n    if (channelNum === 0) {\n      channelFrequency = this.pitch - frequencyOffset;\n    } else {\n      channelFrequency = this.pitch + frequencyOffset;\n    }\n\n    return channelFrequency;\n  };\n\n  BinauralBeat.prototype.getChannel = function (channel) {\n    if (channel === 0) {\n      return this.leftChannel;\n    } else if (channel === 1) {\n      return this.rightChannel;\n    }\n  };\n\n  BinauralBeat.prototype.setPitch = function (pitchFreq) {\n    this.pitch = pitchFreq;\n    this.leftChannel.frequency.value = this._getChannelFrequency(0);\n    return this.rightChannel.frequency.value = this._getChannelFrequency(1);\n  };\n\n  BinauralBeat.prototype.setBeatRate = function (beatRate) {\n    this.beatRate = beatRate;\n    return this.setPitch(this.pitch);\n  };\n\n  BinauralBeat.prototype.setWaveType = function (waveType) {\n    this.waveType = waveType;\n    return this.leftChannel.type = this.rightChannel.type = this.waveType;\n  };\n\n  BinauralBeat.prototype.setPeriodicWave = function (periodicWave) {\n    this.leftChannel.setPeriodicWave(periodicWave);\n    return this.rightChannel.setPeriodicWave(periodicWave);\n  };\n\n  BinauralBeat.prototype.start = function () {\n    if (!this.started) {\n      this._startOscillators();\n\n      this.started = true;\n    }\n\n    return this._connectOscillators();\n  };\n\n  BinauralBeat.prototype.stop = function () {\n    return this._disconnectOscillators();\n  };\n\n  BinauralBeat.prototype.connect = function (dest) {\n    return this.output.connect(dest.input ? dest.input : dest);\n  };\n\n  BinauralBeat.prototype.disconnect = function () {\n    return this.output.disconnect();\n  };\n\n  return BinauralBeat;\n}();","map":{"version":3,"sources":["/Users/AtokAdos/Desktop/CS_Projects/U4Ea/u4ea/client/src/js/beats.js"],"names":["BinauralBeat","SINE","SQUARE","SAWTOOTH","TRIANGLE","ctx","pitch","beats","input","createGain","output","beatRate","waveType","compressNodes","started","_createInternalNodes","_routeNodes","setPitch","setWaveType","prototype","leftChannel","createOscillator","rightChannel","channelMerger","createChannelMerger","compressor","createDynamicsCompressor","connect","_startOscillators","start","_connectOscillators","_disconnectOscillators","disconnect","_getChannelFrequency","channelNum","channelFrequency","frequencyOffset","getChannel","channel","pitchFreq","frequency","value","setBeatRate","type","setPeriodicWave","periodicWave","stop","dest"],"mappings":"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","sourcesContent":["export var BinauralBeat = (function () {\n    BinauralBeat.SINE = 'sine';\n\n    BinauralBeat.SQUARE = 'square';\n\n    BinauralBeat.SAWTOOTH = 'sawtooth';\n\n    BinauralBeat.TRIANGLE = 'triangle';\n\n    function BinauralBeat(ctx, pitch, beats) {\n        this.input = ctx.createGain();\n        this.output = ctx.createGain();\n        this.pitch = pitch;\n        this.beatRate = beats;\n        this.waveType = 'sine';\n        this.compressNodes = false;\n        this.started = false;\n        this._createInternalNodes(ctx);\n        this._routeNodes();\n        this.setPitch(this.pitch);\n        this.setWaveType(this.waveType);\n    }\n\n    BinauralBeat.prototype._createInternalNodes = function (ctx) {\n        this.leftChannel = ctx.createOscillator();\n        this.rightChannel = ctx.createOscillator();\n        this.channelMerger = ctx.createChannelMerger();\n        return this.compressor = ctx.createDynamicsCompressor();\n    };\n\n    BinauralBeat.prototype._routeNodes = function () {\n        if (this.compressNodes) {\n            this.input.connect(this.compressor);\n            this.channelMerger.connect(this.compressor);\n            return this.compressor.connect(this.output);\n        } else {\n            this.input.connect(this.output);\n            return this.channelMerger.connect(this.output);\n        }\n    };\n\n    BinauralBeat.prototype._startOscillators = function () {\n        this.leftChannel.start(0);\n        return this.rightChannel.start(0);\n    };\n\n    BinauralBeat.prototype._connectOscillators = function () {\n        this.leftChannel.connect(this.channelMerger, 0, 0);\n        return this.rightChannel.connect(this.channelMerger, 0, 1);\n    };\n\n    BinauralBeat.prototype._disconnectOscillators = function () {\n        this.leftChannel.disconnect();\n        return this.rightChannel.disconnect();\n    };\n\n    BinauralBeat.prototype._getChannelFrequency = function (channelNum) {\n        var channelFrequency, frequencyOffset;\n        frequencyOffset = this.beatRate / 2;\n        if (channelNum === 0) {\n            channelFrequency = this.pitch - frequencyOffset;\n        } else {\n            channelFrequency = this.pitch + frequencyOffset;\n        }\n        return channelFrequency;\n    };\n\n    BinauralBeat.prototype.getChannel = function (channel) {\n        if (channel === 0) {\n            return this.leftChannel;\n        } else if (channel === 1) {\n            return this.rightChannel;\n        }\n    };\n\n    BinauralBeat.prototype.setPitch = function (pitchFreq) {\n        this.pitch = pitchFreq;\n        this.leftChannel.frequency.value = this._getChannelFrequency(0);\n        return this.rightChannel.frequency.value = this._getChannelFrequency(1);\n    };\n\n    BinauralBeat.prototype.setBeatRate = function (beatRate) {\n        this.beatRate = beatRate;\n        return this.setPitch(this.pitch);\n    };\n\n    BinauralBeat.prototype.setWaveType = function (waveType) {\n        this.waveType = waveType;\n        return this.leftChannel.type = this.rightChannel.type = this.waveType;\n    };\n\n    BinauralBeat.prototype.setPeriodicWave = function (periodicWave) {\n        this.leftChannel.setPeriodicWave(periodicWave);\n        return this.rightChannel.setPeriodicWave(periodicWave);\n    };\n\n    BinauralBeat.prototype.start = function () {\n        if (!this.started) {\n            this._startOscillators();\n            this.started = true;\n        }\n        return this._connectOscillators();\n    };\n\n    BinauralBeat.prototype.stop = function () {\n        return this._disconnectOscillators();\n    };\n\n    BinauralBeat.prototype.connect = function (dest) {\n        return this.output.connect(dest.input ? dest.input : dest);\n    };\n\n    BinauralBeat.prototype.disconnect = function () {\n        return this.output.disconnect();\n    };\n\n    return BinauralBeat;\n\n})();\n\n"]},"metadata":{},"sourceType":"module"}