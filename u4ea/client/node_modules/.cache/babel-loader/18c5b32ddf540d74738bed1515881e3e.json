{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Documents\\\\GitHub\\\\u4ea\\\\u4ea\\\\client\\\\src\\\\components\\\\Webapp.js\";\nimport React, { Component } from \"react\";\nimport Joyride from \"react-joyride\";\nimport Header from \"./Header.js\";\nimport \"../css/style.css\";\nimport data from '../data.json';\nimport { Modal } from 'react-bootstrap';\nimport { BinauralBeat } from '../js/beats';\n/* \r\n    Front end interface for the simple webapp. Uses functions from beats.js n the js folder for \r\n    binaural beat creation.\r\n*/\n\n/* Local Audio Player */\n\nvar context = new AudioContext();\nvar bBeat = new BinauralBeat(context);\nvar volume = context.createGain();\n\nclass Webapp extends Component {\n  constructor() {\n    super();\n\n    this.handlePause = e => {\n      this.setState({\n        playing: false\n      });\n      bBeat.stop();\n    };\n\n    this.handlePlay = e => {\n      this.setState({\n        playing: true\n      });\n      var options = {\n        pitch: this.state.frequency,\n        beatRate: this.state.frequencies[this.state.id]\n      };\n      bBeat = new BinauralBeat(context, options);\n      bBeat.connect(volume);\n      volume.connect(context.destination);\n      volume.gain.value = .8;\n      bBeat.start();\n    };\n\n    this.feelingOpen = e => {\n      this.setState({\n        isfeelingOpen: true\n      });\n    };\n\n    this.feelingClose = e => {\n      this.setState({\n        isfeelingOpen: false\n      });\n    };\n\n    this.boostOpen = e => {\n      this.setState({\n        isboostOpen: true\n      });\n    };\n\n    this.boostClose = e => {\n      this.setState({\n        isboostOpen: false\n      });\n    };\n\n    this.activityOpen = e => {\n      this.setState({\n        isactivityOpen: true\n      });\n    };\n\n    this.activityClose = e => {\n      this.setState({\n        isactivityOpen: false\n      });\n    };\n\n    this.state = {\n      feelings: [],\n      boosts: [],\n      activities: [],\n      feeling: \"\",\n      boost: \"\",\n      activity: \"\",\n      playing: false,\n      paused: false,\n      frequency: \"\",\n      id: \"\",\n      frequencies: [],\n      isfeelingOpen: false,\n      isBoostOpen: false,\n      isActivityOpen: false,\n      steps: [{\n        target: '.selectFeeling',\n        content: /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 30\n          }\n        }, \"Click to choose how you want feel!\"),\n        placement: 'right'\n      }, {\n        target: '.selectBoost',\n        content: /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 30\n          }\n        }, \"Click to choose how you want to be boosted!\"),\n        placement: 'right'\n      }, {\n        target: '.selectActivity',\n        content: /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 30\n          }\n        }, \"Click to choose your activity!\"),\n        placement: 'right'\n      }, {\n        target: '.glyphicon-play-circle',\n        content: /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 30\n          }\n        }, \"After choosing all three, enjoy the binaural beat!\"),\n        placement: 'top'\n      }]\n    };\n  }\n  /* Get Data for feelings, boosts, activities on load */\n\n\n  componentWillMount() {\n    this.setState({\n      feelings: data.feelings,\n      boosts: data.boosts,\n      activities: data.activities\n    });\n  }\n  /* Change feeling state on Click */\n\n\n  setFeeling(name, f) {\n    bBeat.stop();\n    this.feelingClose();\n    this.setState({\n      feeling: name,\n      frequency: f\n    });\n\n    if (this.state.playing) {\n      this.handlePlay();\n    }\n  }\n  /* Set boost state on Click */\n\n\n  setBoost(name, f) {\n    bBeat.stop();\n    this.boostClose();\n    this.setState({\n      boost: name,\n      id: f\n    });\n\n    if (this.state.playing) {\n      this.handlePlay();\n    }\n  }\n  /* Set activity state on Click */\n\n\n  setActivity(name, f) {\n    bBeat.stop();\n    this.activityClose();\n    this.setState({\n      activity: name,\n      frequencies: f\n    });\n\n    if (this.state.playing) {\n      this.handlePlay();\n    }\n  }\n  /* Pause the binaural beat */\n\n\n  render() {\n    /* Render feelings visuals from data.json */\n    const feelings = this.state.feelings.map((item, key) => /*#__PURE__*/React.createElement(\"div\", {\n      key: item.name,\n      className: \"feelingContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chakra\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require(`../img/feelings/${item.color}.png`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${item.color}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"frequencyText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    }, item.frequency_range), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }\n    }, \" \", item.title, \" \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 25\n      }\n    }, \" Shift from: \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 25\n      }\n    }, \" \", item.shift_from, \" \"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 25\n      }\n    }, \" Shift to: \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }\n    }, \" \", item.shift_to, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 21\n      }\n    }), item.feelings.map((feeling, key) => /*#__PURE__*/React.createElement(\"button\", {\n      key: feeling,\n      value: feeling,\n      className: `btn btn-success ${item.color}`,\n      onClick: e => this.setFeeling(e.target.value, item.frequency),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 25\n      }\n    }, feeling)))));\n    /* Render boosts visuals from data.json */\n\n    const boost = this.state.boosts.map((item, key) => /*#__PURE__*/React.createElement(\"div\", {\n      key: item.id,\n      className: \"feelingContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chakra\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require(`../img/boosts/${item.name}.png`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${item.logo}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"frequencyText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    }, item.frequency), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 25\n      }\n    }, \" Shift from: \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 25\n      }\n    }, \" \", item.shift_from, \" \"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 25\n      }\n    }, \" Shift to: \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 25\n      }\n    }, \" \", item.shift_to, \" \"))), /*#__PURE__*/React.createElement(\"button\", {\n      key: item.name,\n      value: item.name,\n      className: `btn btn-success ${item.logo}`,\n      onClick: e => this.setBoost(e.target.value, item.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }\n    }, item.name)));\n    /* Render activities from data.json */\n\n    const activity = this.state.activities.map((item, key) =>\n    /*#__PURE__*/\n\n    /* Render buttons */\n    React.createElement(\"button\", {\n      key: item.name,\n      value: item.name,\n      className: 'btn btn-success activity',\n      onClick: e => this.setActivity(e.target.value, item.frequencies),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }\n    }, item.name));\n    /* isPlalyable */\n\n    const playable = this.state.feeling !== \"\" && this.state.boost !== \"\" && this.state.activity !== \"\";\n    /* Disable/enable play button based on isPlayable */\n\n    let player;\n\n    if (playable) {\n      if (this.state.playing) {\n        player = /*#__PURE__*/React.createElement(\"button\", {\n          className: \"btn btn-default btn-circle glyphicon glyphicon-pause\",\n          onClick: this.handlePause,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 26\n          }\n        });\n      } else {\n        player = /*#__PURE__*/React.createElement(\"button\", {\n          className: \"btn btn-default btn-circle glyphicon glyphicon-play-circle\",\n          onClick: this.handlePlay,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 26\n          }\n        });\n      }\n    } else {\n      player = /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-default btn-circle glyphicon glyphicon-play-circle\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 22\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Joyride, {\n      steps: this.state.steps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"div1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 25\n      }\n    }, \"I WANT TO FEEL\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"selectText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 33\n      }\n    }, this.state.feeling ? /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-light\",\n      onClick: this.feelingOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 59\n      }\n    }, this.state.feeling) : /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-light selectFeeling\",\n      onClick: this.feelingOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 41\n      }\n    }, \"Select Mood\")))), /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.isfeelingOpen,\n      onHide: this.feelingClose,\n      animation: false,\n      dialogClassName: \"my-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"selector\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 37\n      }\n    }, \"Choose a feeling:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 37\n      }\n    }), feelings)), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.feelingClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 33\n      }\n    }, \"Cancel\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"div2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 25\n      }\n    }, \"AND BOOST MY\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"selectText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 33\n      }\n    }, this.state.boost ? /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-light\",\n      onClick: this.boostOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 57\n      }\n    }, this.state.boost) : /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-light selectBoost\",\n      onClick: this.boostOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 41\n      }\n    }, \"Select Mood\"))), /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.isboostOpen,\n      onHide: this.boostClose,\n      animation: false,\n      dialogClassName: \"my-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"selector\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 41\n      }\n    }, \"Choose a boost:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 41\n      }\n    }), boost)), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.boostClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 37\n      }\n    }, \"Cancel\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"div3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 25\n      }\n    }, \"WHILE I\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"selectText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 33\n      }\n    }, this.state.activity ? /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-light\",\n      onClick: this.activityOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 60\n      }\n    }, this.state.activity) : /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-light selectActivity\",\n      onClick: this.activityOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 41\n      }\n    }, \"Select Mood\"))), /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.isactivityOpen,\n      onHide: this.activityClose,\n      animation: false,\n      dialogClassName: \"my-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"selector\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 41\n      }\n    }, \"Choose an activity:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 41\n      }\n    }), activity)), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.activityClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 37\n      }\n    }, \"Cancel\")))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bg-light play-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }\n    }, player));\n  }\n\n}\n\nexport default Webapp;","map":{"version":3,"sources":["C:/Users/andre/Documents/GitHub/u4ea/u4ea/client/src/components/Webapp.js"],"names":["React","Component","Joyride","Header","data","Modal","BinauralBeat","context","AudioContext","bBeat","volume","createGain","Webapp","constructor","handlePause","e","setState","playing","stop","handlePlay","options","pitch","state","frequency","beatRate","frequencies","id","connect","destination","gain","value","start","feelingOpen","isfeelingOpen","feelingClose","boostOpen","isboostOpen","boostClose","activityOpen","isactivityOpen","activityClose","feelings","boosts","activities","feeling","boost","activity","paused","isBoostOpen","isActivityOpen","steps","target","content","placement","componentWillMount","setFeeling","name","f","setBoost","setActivity","render","map","item","key","require","color","frequency_range","title","shift_from","shift_to","logo","playable","player"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Joyride from \"react-joyride\";\r\n\r\nimport Header from \"./Header.js\"\r\n\r\nimport \"../css/style.css\";\r\nimport data from '../data.json';\r\nimport { Modal } from 'react-bootstrap';\r\n\r\nimport { BinauralBeat } from '../js/beats'\r\n\r\n\r\n/* \r\n    Front end interface for the simple webapp. Uses functions from beats.js n the js folder for \r\n    binaural beat creation.\r\n*/\r\n\r\n/* Local Audio Player */\r\nvar context = new AudioContext()\r\nvar bBeat = new BinauralBeat(context);\r\nvar volume = context.createGain();\r\n\r\n\r\n\r\nclass Webapp extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            feelings: [],\r\n            boosts: [],\r\n            activities:\r\n                [],\r\n            feeling: \"\",\r\n            boost: \"\",\r\n            activity: \"\",\r\n            playing: false,\r\n            paused: false,\r\n            frequency: \"\",\r\n            id: \"\",\r\n            frequencies: [],\r\n            isfeelingOpen: false,\r\n            isBoostOpen: false,\r\n            isActivityOpen: false,\r\n            steps: [\r\n                {\r\n                    target: '.selectFeeling',\r\n                    content: <h2>Click to choose how you want feel!</h2>,\r\n                    placement: 'right'\r\n                },\r\n                {\r\n                    target: '.selectBoost',\r\n                    content: <h2>Click to choose how you want to be boosted!</h2>,\r\n                    placement: 'right'\r\n                },\r\n                {\r\n                    target: '.selectActivity',\r\n                    content: <h2>Click to choose your activity!</h2>,\r\n                    placement: 'right'\r\n                },\r\n                {\r\n                    target: '.glyphicon-play-circle',\r\n                    content: <h2>After choosing all three, enjoy the binaural beat!</h2>,\r\n                    placement: 'top'\r\n                },\r\n          ]\r\n    \r\n        }\r\n    }\r\n\r\n    /* Get Data for feelings, boosts, activities on load */\r\n    componentWillMount() {\r\n        this.setState({\r\n            feelings: data.feelings,\r\n            boosts: data.boosts,\r\n            activities: data.activities,\r\n        })\r\n    }\r\n\r\n\r\n\r\n    /* Change feeling state on Click */\r\n    setFeeling(name, f) {\r\n        bBeat.stop();\r\n        this.feelingClose();\r\n        this.setState({\r\n            feeling: name,\r\n            frequency: f,\r\n        })\r\n        if (this.state.playing) {\r\n            this.handlePlay()\r\n        }\r\n    }\r\n\r\n    /* Set boost state on Click */\r\n    setBoost(name, f) {\r\n        bBeat.stop();\r\n        this.boostClose();\r\n        this.setState({\r\n            boost: name,\r\n            id: f,\r\n        })\r\n        if (this.state.playing) {\r\n            this.handlePlay()\r\n        }\r\n    }\r\n\r\n    /* Set activity state on Click */\r\n    setActivity(name, f) {\r\n        bBeat.stop();\r\n        this.activityClose();\r\n        this.setState({\r\n            activity: name,\r\n            frequencies: f,\r\n        })\r\n        if (this.state.playing) {\r\n            this.handlePlay()\r\n        }\r\n    }\r\n\r\n    /* Pause the binaural beat */\r\n    handlePause = e => {\r\n        this.setState({\r\n            playing: false,\r\n        })\r\n        bBeat.stop();\r\n    }\r\n\r\n    /* Play the binaural beat based on selected feeling, boost, and activity */\r\n    handlePlay = e => {\r\n        this.setState({\r\n            playing: true\r\n        })\r\n        var options = {\r\n            pitch: this.state.frequency,\r\n            beatRate: this.state.frequencies[this.state.id],\r\n        }\r\n        bBeat = new BinauralBeat(context, options)\r\n        bBeat.connect(volume)\r\n        volume.connect(context.destination)\r\n        volume.gain.value = .8\r\n\r\n        bBeat.start()\r\n    }\r\n\r\n    /* Open feeling selection modal */\r\n    feelingOpen = e => {\r\n        this.setState({\r\n            isfeelingOpen: true\r\n        })\r\n    }\r\n\r\n    /* Close feeling selection modal */\r\n    feelingClose = e => {\r\n        this.setState({\r\n            isfeelingOpen: false\r\n        })\r\n    }\r\n\r\n    /* Open boost selection modal */\r\n    boostOpen = e => {\r\n        this.setState({\r\n            isboostOpen: true\r\n        })\r\n    }\r\n\r\n    /* Close boost selection modal */\r\n    boostClose = e => {\r\n        this.setState({\r\n            isboostOpen: false\r\n        })\r\n    }\r\n\r\n    /* Open activity selection modal */\r\n    activityOpen = e => {\r\n        this.setState({\r\n            isactivityOpen: true\r\n        })\r\n    }\r\n\r\n    /* Close activity selection modal */\r\n    activityClose = e => {\r\n        this.setState({\r\n            isactivityOpen: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        /* Render feelings visuals from data.json */\r\n        const feelings = this.state.feelings.map((item, key) =>\r\n            <div key={item.name} className=\"feelingContainer\">\r\n                <div className=\"chakra\">\r\n                    <img src={require(`../img/feelings/${item.color}.png`)} />\r\n                </div>\r\n                <div className={`${item.color}`}>\r\n                    <b className=\"frequencyText\">{item.frequency_range}</b>\r\n                    <br />\r\n                    <b> {item.title} </b>\r\n                    <br />\r\n                    <div className=\"details\">\r\n                        <b> Shift from: </b>\r\n                        <p> {item.shift_from} </p>\r\n                        <b> Shift to: </b>\r\n                        <p> {item.shift_to} </p>\r\n                    </div>\r\n                    <div>\r\n                    </div>\r\n                    {/* Render buttons */}\r\n                    {item.feelings.map((feeling, key) => (\r\n                        <button key={feeling} value={feeling} className={`btn btn-success ${item.color}`} onClick={e => this.setFeeling(e.target.value, item.frequency)}>\r\n                            {feeling}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        /* Render boosts visuals from data.json */\r\n        const boost = this.state.boosts.map((item, key) =>\r\n            <div key={item.id} className=\"feelingContainer\">\r\n                <div className=\"chakra\">\r\n                    <img src={require(`../img/boosts/${item.name}.png`)} />\r\n                </div>\r\n                <div className={`${item.logo}`}>\r\n                    <b className=\"frequencyText\">{item.frequency}</b>\r\n\r\n                    <div className=\"details\">\r\n                        <b> Shift from: </b>\r\n                        <p> {item.shift_from} </p>\r\n                        <b> Shift to: </b>\r\n                        <p> {item.shift_to} </p>\r\n                    </div>\r\n                </div>\r\n                {/* Render Buttons */}\r\n                <button key={item.name} value={item.name} className={`btn btn-success ${item.logo}`} onClick={e => this.setBoost(e.target.value, item.id)}>\r\n                    {item.name}\r\n                </button>\r\n\r\n            </div>\r\n        )\r\n\r\n        /* Render activities from data.json */\r\n        const activity = this.state.activities.map((item, key) =>\r\n            /* Render buttons */\r\n            <button key={item.name} value={item.name} className={'btn btn-success activity'} onClick={e => this.setActivity(e.target.value, item.frequencies)}>\r\n                {item.name}\r\n            </button>\r\n        );\r\n\r\n        /* isPlalyable */\r\n        const playable = ((this.state.feeling !== \"\") &&\r\n            (this.state.boost !== \"\") &&\r\n            (this.state.activity !== \"\"))\r\n\r\n        /* Disable/enable play button based on isPlayable */\r\n        let player;\r\n        if (playable) {\r\n            if (this.state.playing) {\r\n                player = <button className=\"btn btn-default btn-circle glyphicon glyphicon-pause\" onClick={this.handlePause}></button>\r\n            } else {\r\n                player = <button className=\"btn btn-default btn-circle glyphicon glyphicon-play-circle\" onClick={this.handlePlay}></button>\r\n            }\r\n        } else {\r\n            player = <button className=\"btn btn-default btn-circle glyphicon glyphicon-play-circle\" disabled></button>\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div>\r\n                <Joyride\r\n                    steps={this.state.steps}\r\n                />\r\n                    <div className=\"div1\">\r\n                        <div className=\"text\">\r\n                            I WANT TO FEEL\r\n                            <br />\r\n                            <div className=\"selectText\">\r\n                                <b>\r\n                                    {this.state.feeling ? <button type=\"button\" className=\"btn btn-light\" onClick={this.feelingOpen}>\r\n                                        {this.state.feeling}\r\n                                    </button> :\r\n                                        <button type=\"button\" className=\"btn btn-light selectFeeling\" onClick={this.feelingOpen}>\r\n                                            Select Mood\r\n                                      </button>\r\n                                    }\r\n                                </b>\r\n                            </div>\r\n                        </div>\r\n                        <Modal show={this.state.isfeelingOpen} onHide={this.feelingClose} animation={false}\r\n                            dialogClassName=\"my-modal\">\r\n                            <Modal.Header>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n                                <div className=\"selector\">\r\n                                    <h1>Choose a feeling:</h1>\r\n                                    <br />\r\n                                    {feelings}\r\n                                </div>\r\n\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <button onClick={this.feelingClose}>Cancel</button>\r\n\r\n                            </Modal.Footer>\r\n                        </Modal>\r\n                    </div>\r\n                    <div className=\"div2\">\r\n                        <div className=\"text\">\r\n                            AND BOOST MY\r\n                            <br />\r\n                            <div className=\"selectText\">\r\n                                <b>\r\n                                    {this.state.boost ? <button type=\"button\" className=\"btn btn-light\" onClick={this.boostOpen}>\r\n                                        {this.state.boost}\r\n                                    </button> :\r\n                                        <button className=\"btn btn-light selectBoost\" onClick={this.boostOpen}>\r\n                                            Select Mood\r\n                                      </button>\r\n                                    }\r\n                                </b>\r\n                            </div>\r\n                            <Modal show={this.state.isboostOpen} onHide={this.boostClose} animation={false}\r\n                                dialogClassName=\"my-modal\">\r\n                                <Modal.Header>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    <div className=\"selector\">\r\n                                        <h1>Choose a boost:</h1>\r\n                                        <br />\r\n                                        {boost}\r\n                                    </div>\r\n\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <button onClick={this.boostClose}>Cancel</button>\r\n\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"div3\">\r\n                        <div className=\"text\">\r\n                            WHILE I\r\n                            <br />\r\n                            <div className=\"selectText\">\r\n                                <b>\r\n                                    {this.state.activity ? <button type=\"button\" className=\"btn btn-light\" onClick={this.activityOpen}>\r\n                                        {this.state.activity}\r\n                                    </button> :\r\n                                        <button className=\"btn btn-light selectActivity\" onClick={this.activityOpen}>\r\n                                            Select Mood\r\n                                      </button>\r\n                                    }\r\n                                </b>\r\n                            </div>\r\n                            <Modal show={this.state.isactivityOpen} onHide={this.activityClose} animation={false}\r\n                                dialogClassName=\"my-modal\">\r\n                                <Modal.Header>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    <div className=\"selector\">\r\n                                        <h1>Choose an activity:</h1>\r\n                                        <br />\r\n                                        {activity}\r\n                                    </div>\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <button onClick={this.activityClose}>Cancel</button>\r\n\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bg-light play-bar\">\r\n                    {player}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Webapp;"]},"metadata":{},"sourceType":"module"}